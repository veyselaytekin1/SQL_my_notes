--ÖNCEKİ DERSİN ÖZETİ:
-- UNION iki kumenin kesişim kümesini unique (tekrarsız)olarak vererek bileşim alır
-- UNION ALL iki kumenin kesişim kümesini tekrarlı olarak vererek bileşim alır
-- INTERSECT iki kumenin kesişim kümesini verir
-- EXCEPT iki kumeden birinin diğerinden farkını getirir.


-------------------------------İki table ile çalışılırsa------------------------------

--JOINS:
--1) INNER JOIN: Ortak (common) dataları verir (kesişim kumesi)     A n B
--2) LEFT JOIN: Birinci table ın tüm datasını verir.                A
--2) RIGHT JOIN: İkinci table nin tüm datasını verir.               B
--4)FULL JOIN: İki table in tüm datasını verir.                     AUB
--5) SELF JOIN: TEk table üzerinde çalışılırken iki table varmış gibi çalıştırılır.     


CREATE TABLE my_companies
(
  company_id CHAR(3),
  company_name VARCHAR(20)
);
INSERT INTO my_companies VALUES(100, 'IBM');
INSERT INTO my_companies VALUES(101, 'GOOGLE');
INSERT INTO my_companies VALUES(102, 'MICROSOFT');
INSERT INTO my_companies VALUES(103, 'APPLE');
SELECT * FROM my_companies;
CREATE TABLE orders
(
  company_id CHAR(3),
  order_id CHAR(3),
  order_date DATE
);
INSERT INTO orders VALUES(101, 11, '17-Apr-2020');
INSERT INTO orders VALUES(102, 22, '18-Apr-2020');
INSERT INTO orders VALUES(103, 33, '19-Apr-2020');
INSERT INTO orders VALUES(104, 44, '20-Apr-2020');
INSERT INTO orders VALUES(105, 55, '21-Apr-2020');
SELECT * FROM orders;


--JOINS: 1) INNER JOIN : Ortak (common) data verir.
--       2) LEFT JOIN : Birinci table'ın tüm datasını verir.
--       3) RIGHT JOIN : İkinci table'ın tüm datasını verir.
--       4) FULL JOIN : İki table'ın da tüm datasını verir.
--       5) SELF JOIN : Tek table üzerinde çalışırken iki table varmış gibi çalışılır.


--1) INNER JOIN : Ortak (common) data verir.

--Ortak companyler için company_name, order_id ve order_date değerlerini çağırın.
SELECT company_name, order_id, order_date
FROM my_companies INNER JOIN orders
ON my_companies.company_id = orders.company_id;

--VEYA Alias lar ile aşağıdaki gibi (bu kullanım yaygın):

SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc INNER JOIN orders o
ON mc.company_id = o.company_id;


-- 2) LEFT JOIN : Birinci table'ın tüm datasını verir.

--my_companies table'ındaki companyler için company_name, order_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc LEFT JOIN orders o
ON mc.company_id = o.company_id;


-- 3) RIGHT JOIN : İkinci table'ın tüm datasını verir.

--Orders table'ındaki company'ler için company_name, company_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.company_id, o.order_date
FROM my_companies mc RIGHT JOIN orders o
ON mc.company_id = o.company_id;

---veya;
SELECT mc.company_name, o.company_id, o.order_date
FROM   orders o LEFT JOIN  my_companies mc
ON mc.company_id = o.company_id;

-- 4) FULL JOIN : İki table'ın da tüm datasını verir.

--İki table'dan da company_name, order_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc FULL JOIN orders o
ON mc.company_id = o.company_id;

--veya;
SELECT mc.company_name, o.company_id, o.order_date
FROM   orders o FULL JOIN  my_companies mc
ON mc.company_id = o.company_id;


--5) SELF JOIN : Tek table üzerinde çalışırken iki table varmış gibi çalışılır.

--workers tablosunu kullanarak çalışanların yöneticilerini gösteren bir tablo hazırlayın.
CREATE TABLE workers
(
  id CHAR(2),
  name VARCHAR(20),
  title VARCHAR(60),
  manager_id CHAR(2)
);
INSERT INTO workers VALUES(1, 'Ali Can', 'SDET', 2);
INSERT INTO workers VALUES(2, 'John Walker', 'QA', 3);
INSERT INTO workers VALUES(3, 'Angie Star', 'QA Lead', 4);
INSERT INTO workers VALUES(4, 'Amy Sky', 'CEO', 5);
SELECT * FROM workers;

SELECT employee.name, manager.name
FROM workers employee INNER JOIN workers manager --1. tablo employee 2. tablo manager tablosu oldu artık
ON employee.manager_id = manager.id;

--id--name--managerid
--1---Ali---2 -----___                --1---Ali---2
                       ---
--2---John--3 -----___     ---->      --2---John--3
                       --
--3---Angie-4 -----___     ---->     --3---Angie-4
                      ---
--4---Amy---5            ---->       --4---Amy---5

--şeklinde aynı tabloyu iki kez kullanrak birinin manager id sinden
--diğerindeki ilgili id ye giderek aşağıdaki sonuçları tablo edebilriz:

--tablosunda Ali nin manageri John(çünkü Manager_id si 2 yi gösteriyor)
--John un manageri Angie
--Angie nin manageri Amy
--ve Amy nin manageri 5 nolu tabloda ismi olmayan bir kişi

--------------------------------------------------------------------------------------


--ALTER TABLE

--1) Field(sutun) ekleme:

ALTER TABLE workers
ADD company_industry VARCHAR(20);

     SELECT * FROM workers;


-- 2) Default (varsayılan) deger ile sutun ekleme:

ALTER TABLE workers
ADD worker_address VARCHAR(80) DEFAULT 'Miami, FL, USA';

    SELECT * FROM workers;


--3)  Çoklu Field - sutun ekleme:

ALTER TABLE workers
ADD COLUMN number_of_workers CHAR(5) DEFAULT 0,
ADD COLUMN name_of_ceo VARCHAR(20);

    SELECT * FROM workers;
    
    

--4)  Field Nasıl Kaldırılır:

ALTER TABLE workers
DROP COLUMN name_of_ceo;

    SELECT * FROM workers;
    
    

-- 5) Field nasıl yeniden adlandırılır:

ALTER TABLE workers
RENAME COLUMN company_industry TO company_proffession;

    SELECT * FROM workers;
    
    

-- 6) Table nasıl yeniden adlandırılır:
ALTER TABLE workers
RENAME TO employees;

    SELECT * FROM workers;
    ---ERROR:  relation "workers" does not exist  UYARISINI verdi çünkü bu isimde artık tablo yok

    SELECT * FROM employees;   -- artık tablomuz bu isimde çağrılabilir.



-- 7) Field nasıl modifiye edilir (Add constraint, data tipi değiştirme, data kapasite değiştirme,):
-----NOT: Constraint eklerken mevcut data durumuna dikkat ederiz. 
-----Mesela önceden tekrarlı girilmişse field, onu unique yapamayız

------a) Constraint Ekleme:
-------a1) number_of_workers sutununa "NOT NULL" constraint ekleme:
ALTER TABLE employees
ALTER COLUMN number_of_workers SET NOT NULL ;
       
       SELECT * FROM employees;
       
       
       
-------a2) company_proffession sutununa "UNIQUE" constraint ekleme:
ALTER TABLE employees
ADD CONSTRAINT company_profession_unique UNIQUE(company_proffession);

       SELECT * FROM employees; 


-------a3)worker_address sütununa "UNIQUE" constraint ekleyin.
ALTER TABLE employees
ALTER CONSTRAINT worker_address_unique UNIQUE (worker_address); 

       SELECT * FROM employees; -- Mevcut field tekrarlı olduğunudan ona unique yapamayız


------a) Data Tipi/ Boyutunu Değiştirme:
--------b1)company_profession sütununun data tipini CHAR(5) yapın:
ALTER TABLE employees
ALTER COLUMN company_proffession TYPE CHAR(5);
      
      SELECT * FROM employees;


--------b2)worker_address sutununun data tipini CHAR(5) yapın.
ALTER TABLE employees
ALTER COLUMN  worker_address  TYPE CHAR (5); --Sutunun data boyutu küçültülememektedir
                                             --Bazı datalar verilmek istenen boyuttan daha küçüktür
      SELECT * FROM employees;


--------b3)worker_address sutununun data tipini CHAR(30) yapın.
ALTER TABLE employees
ALTER COLUMN  worker_address  TYPE CHAR (30); --

      SELECT * FROM employees;
      
      
      
----------------------------------------------------------------------------------------------

-- FUNCTION (Fonksiyon) Naıl Yazılır?
----Bazı görevleri (ortalama alma vs.) daha hızlı yapabilmemk için
----CRUD operation için

----SQL de her function return type olarak bir data verir.
----REturn type olarak data vermeyen işlemlere "Procedure" denir.

CREATE OR REPLACE FUNCTION addf (x NUMERIC, y NUMERIC)
RETURNS NUMERIC
LANGUAGE plpgsql
AS
$$
    BEGIN

    RETURN x+y;

    END
$$

SELECT * FROM addf(2,3) AS "Addition";




--Koninin hacmini hesaplayan bir fonksiyon yazalım:

CREATE OR REPLACE FUNCTION volume_of_cone (r NUMERIC, h NUMERIC)
RETURNS NUMERIC
LANGUAGE plpgsql
AS
$$
    BEGIN

    RETURN 3.14*r*r*h*1/3;

    END
$$


SELECT * FROM volume_of_cone(3,6) AS "Koni_hacmi";


İyi Çalışmalar
ET(edu)  :)
