--Table'a veri nasıl girilir:
CREATE TABLE students
(
    student_id SMALLINT PRIMARY KEY,
    student_name VARCHAR(50) UNIQUE,
    student_age SMALLINT NOT NULL,
    student_dob DATE,
    CONSTRAINT student_age_check CHECK(student_age BETWEEN 0 AND 30),-- 0 ve 30 dahil
    CONSTRAINT student_name_upper_case CHECK(student_name = upper(student_name))
);
--1.Yol: Tüm sütunlara veri girme:
INSERT INTO students VALUES('101', 'ALI CAN', 13, '10-Aug-2021');
INSERT INTO students VALUES('102', 'VELI HAN', 14, '10-Aug-2007');
--Integer değerler single quotes ile veya yalın kullanılabilir.
INSERT INTO students VALUES(103, 'AYSE TAN', 14, '08-Aug-2007');
INSERT INTO students VALUES(104, 'KEMAL KUZU', 15, null);
--VARCHAR, single quote ile kullanılmak zorundadır.
INSERT INTO students VALUES('105', 'TOM HANKS', 25, '12-Sep-1996');
INSERT INTO students VALUES('106', 'ANGELINA JULIE', 30, '12-Sep-1986');
INSERT INTO students VALUES('107', 'BRAD PITT', 0, '10-Aug-2021');
--2.Yol: Spesifik bir sütuna veri nasıl girilir:
INSERT INTO students(student_id, student_age) VALUES('108', 17);
INSERT INTO students(student_name, student_id, student_age) VALUES('JOHN WALKER', '109', 24);

--Varolan bir data nasıl değiştirilir:
UPDATE students                                     -- TABLOYU
SET student_name = 'LEO OCEAN'                      -- SUTUNU
WHERE student_id = '108';                           -- SATIRI   BELİRTİR

--John Walker, dob sütununu to 11-Dec-1997 değerine değiştirin.
UPDATE students
SET student_dob = '11-Dec-1997'
WHERE student_id = '109';

--Çoklu hücre(cell) nasıl değiştirilir:
--105 id'li dob hücresini 11-Apr-1996 değerine ve name hücresini  TOM HANKS değerine güncelle.
UPDATE students
SET student_dob = '11-Apr-1996',
    student_name = 'TOM HANKS'
WHERE student_id = '105';
--Çoklu record(satır) nasıl güncellenir.
-- id si 106 dan küçük tüm dob değerlerini 01-Aug-2021 e güncelle.
UPDATE students
SET student_dob = '01-Aug-2021'
WHERE student_id < 106;
--Tüm age değerlerini en yüksek age değerine güncelle.
UPDATE students
SET student_age = (SELECT MAX(student_age) FROM students);

--Tüm student-dob degerlerini en düşük student_dob degerine güncelleyin
UPDATE students
SET student_dob = (SELECT MIN(student_dob)FROM students);

--Sutunları worker_id, worker_name, worker_salary
--worker_id sutununu worker_id_pkyprimary key yapalım
-- 4 record girişi yapın



CREATE TABLE workers
(
worker_id SMALLINT,
worker_name VARCHAR(50) UNIQUE,
worker_salary SMALLINT NOT NULL,
CONSTRAINT worker_id_pk PRIMARY KEY(worker_id)
);
INSERT INTO workers VALUES('10', 'Mehmet', 10000);
INSERT INTO workers VALUES('11', 'Ahmet', 15000);    
INSERT INTO workers VALUES('12', 'Ali', 20000);
INSERT INTO workers VALUES('13', 'Veli', 30000);
    
    );



--Veli nin salary değerini en yüksek salary değerinin %20 sine düşüreceğim
UPDATE workers
SET worker_salary = (SELECT MAX(worker_salary)*0.8 FROM workers)
WHERE worker_id=13;

--Alinin salary ni en düşük salary nin %30 fazlasına yükseltelim

UPDATE workers
SET worker_salary = (SELECT MIN(worker_salary) FROM workers)*1.3
WHERE worker_id=12;

--Ortalama salary degerinden düşük salary degerini 1000 artıracağız
UPDATE workers
SET worker_salary = worker_salary+1000
WHERE worker_salary<(SELECT AVG(worker_salary) FROM workers);


--Ortalama salary değerinden düşük salary degerlerini ortalamaya çekelim

UPDATE workers
SET worker_salary = (SELECT AVG(worker_salary) FROM workers)
WHERE worker_salary<(SELECT AVG(worker_salary) FROM workers);


--IS NULL Condtion

CREATE TABLE people
(
ssn CHAR(9),
name VARCHAR(50),
address VARCHAR(80)
);
INSERT INTO people VALUES(123456789, 'Mark Star', 'Florida');
INSERT INTO people VALUES(234567890, 'Angie Way', 'Virginia');
INSERT INTO people VALUES(345678901, 'Maryy Tien', 'New Jersey');
INSERT INTO people(ssn, address) VALUES(456789012, 'Michigan');
INSERT INTO people(ssn, address) VALUES(567890123, 'California');
INSERT INTO people(ssn, name) VALUES(567890123, 'California');

--null name degerlerini "To be inserted later" değerine güncellerin

UPDATE people
SET name = 'To be inserted later'
WHERE name IS NULL;

----null addreess degerlerini "To be inserted later" değerine güncellerin

UPDATE people
SET address = 'To be inserted later'
WHERE address IS NULL;


--Bir Table da n record--satır--row nasıl silinir?

DELETE FROM people
WHERE ssn= '234567890';

--isimsiz recordları sil

DELETE FROM people
WHERE name = 'To be inserted later'

--Tüm recorları silin
--DELETE tüm recordları siler Table yı silme

DELETE FROM people;

--name ve adres degerleri null olan recordları silmek

DELETE FROM people
WHERE name IS NULL OR address IS NULL;

--ssn değeri 123456789 dan büyük ve 345678901 den kücük olan recordları sil

DELETE FROM people
WHERE ssn > '123456789' AND ssn < '345678901';

--- name değeri null olmayan recordları da IS NOT NULL ile silebiliriz

DELETE FROM people
WHERE name IS NOT NULL;


--TRUNCATE command tüm recordları kalıcı siler 
--DELETE den farkı:
--1)DELETE de sildiğimiz recordlar geri çağırabilirz(Roll back) TRUNCATE silme kalıcıdır geri çağıramayız
--2)DELETE de filtrelemek için WHERE kullanılabilir fakar TRUNCATE de kullanılmaz

TRUNCATE TABLE people;

-- Komut ile Table silme
--Schema (Şema--birbirlieri ile ilişkili table lar) dan table kaldırma:

DROP TABLE students;

--DQL: Data Query Language DAta okuma için kullanılan dil(SELECT)

CREATE TABLE workers
(
    id SMALLINT,
    name VARCHAR(50),
    salary SMALLINT,
    CONSTRAINT id4_pk PRIMARY KEY(id)
);
INSERT INTO workers VALUES(10001, 'Ali Can', 12000);
INSERT INTO workers VALUES(10002, 'Veli Han', 2000);
INSERT INTO workers VALUES(10003, 'Mary Star', 7000);
INSERT INTO workers VALUES(10004, 'Angie Ocean', 8500);


--Tüm recorldarı çağırma
SELECT * 
FROM workers;

--SPESİFİK BİR FIELD çağırma
SELECT name 
FROM workers;

--Spesifik çoklu field lar çağırma
SELECT name, salary
FROM workers;

--Spesifik bir record nasıl çağrılır:

SELECT *
FROM workers
WHERE id=10001;

-- Çoklu spesifik recorldar nası lçağrılır:

SELECT *
FROM workers
WHERE id < 10003;

-- SAlary değeri 2000 7000 ve 12000 olanları çağıralım
--1.YOL
SELECT * 
FROM workers
WHERE salary=2000 or salary=7000 or salary=12000;

--2.YOL:
SELECT *
FROM workers
WHERE salary IN(2000, 7000, 12000);

--Spesifik bir hücre -- cell nasıl çağrılır?:

SELECT name
FROM workers
WHERE id=10002; 

-- Enyüksek salary değery ola record değeri ni çağıralım
--REcordları çağırırıken Tüm fieldleri * ile çağırırız ***************

-- Bu datayı değiştirmez çağırır buna DQL denir

SELECT *
FROM workers
WHERE salary= (SELECT MAX (salary)FROM workers);


-- En düşük salary değeri olan name i çağıralım:
SELECT name
FROM workers
WHERE salary= (SELECT MIN (salary)FROM workers);












