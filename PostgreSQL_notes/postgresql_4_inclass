CREATE TABLE employees
(
  id CHAR(9),
  name VARCHAR(50),
  state VARCHAR(50),
  salary SMALLINT,
  company VARCHAR(20)
);
INSERT INTO employees VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO employees VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO employees VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO employees VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO employees VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO employees VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO employees VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');
SELECT * FROM employees;


CREATE TABLE companies
(
  company_id CHAR(9),
  company VARCHAR(20),
  number_of_employees SMALLINT
);
INSERT INTO companies VALUES(100, 'IBM', 12000);
INSERT INTO companies VALUES(101, 'GOOGLE', 18000);
INSERT INTO companies VALUES(102, 'MICROSOFT', 10000);
INSERT INTO companies VALUES(103, 'APPLE', 21000);
SELECT * FROM companies;


--Her Bir company için company, number_of_emploers ve ort salary degerini bulalım--
--- istediğimiz her bir field i SELECT in yanına virgülle ayırarak yazalım

SELECT company, number_of_employees, (SELECT AVG (salary) FROM employees
                                      WHERE companies.company = employees.company)
                                      AS avg_salary_per_company
FROM companies;


--Herbir company için company_id, company,  en yüksek ve en düşük salary değerlerini bulun.

SELECT company_id, company, (SELECT MAX (salary)FROM employees
                            WHERE companies.company = employees.company),
                            (SELECT MIN (salary)FROM employees
                             WHERE companies.company = employees.company)
FROM companies;


--LIKE Condition: Wilcardlar ile Kullanılır

--1) % Wildcardı : 0 (hiçbirşey) ya da daha fazla karakteri temsil eder.

--E' ile başlayan employee 'name' değerlerini çağırın.
SELECT name
FROM employees
WHERE name LIKE 'E%'  -- E ile başlayan ifadeler GİBİ olan 


--e' ile biten employee 'name' değerlerini çağırın.
SELECT name
FROM employees
WHERE name LIKE '%e'  -- E ile başlayan ifadeler GİBİ olan


--B' ile başlayıp t ile biten employee 'name' değerlerini çağırın.
SELECT name
FROM employees
WHERE name LIKE 'B%t'


--Herhangi bir yerinde 'a' bulunan employee 'name' değerlerini çağırın.
SELECT name
FROM employees
WHERE name LIKE '%a%'


--Herhangi bir yerinde 'e' veya 'r' bulunan employee 'name' değerlerini çağırın.
SELECT name
FROM employees
WHERE name LIKE '%e%r%' OR name LIKE '%r%e%'


--2)  _ Wildcard ı Tek Karakteri temsil eder

--İkinci karakteri 'e' ve dördüncü karakteri 'n' olan "state" değerlerini çağırın.
SELECT state
FROM employees
WHERE state LIKE '_e_n%';


--Sondan ikinci karakteri 'i' olan "state" değerlerini çağırın.
SELECT state
FROM employees
WHERE state LIKE '%i_';

--İkinci karakteri 'e' olan ve en az 6 karakteri bulunan "state" değerlerini çağırın.
SELECT state
FROM employees
WHERE state LIKE '_e____%';


--İkinci karakterinden sonra herhangi bir yerinde 'i' bulunan "state" değerlerini çağırın.
SELECT state
FROM employees
WHERE state LIKE '__%i%';


CREATE TABLE words
(
  word_id CHAR(10) UNIQUE,
  word VARCHAR(50) NOT NULL,
  number_of_letters SMALLINT
);
INSERT INTO words VALUES (1001, 'hot', 3);
INSERT INTO words VALUES (1002, 'hat', 3);
INSERT INTO words VALUES (1003, 'hit', 3);
INSERT INTO words VALUES (1004, 'hbt', 3);
INSERT INTO words VALUES (1008, 'hct', 3);
INSERT INTO words VALUES (1005, 'adem', 4);
INSERT INTO words VALUES (1006, 'selena', 6);
INSERT INTO words VALUES (1007, 'yusuf', 5);



--NOT LIKE Condition: Wilcard ile Kullanılır

--Herhangi bir yerinde 'h' bulunmayan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word NOT LIKE '%h%';


--'t' veya 'f' ile bitmeyen "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word NOT LIKE '%t' AND word NOT LIKE '%f';   --veya densede not olumsuz oldugu için AND le yapılır

--Hergangi bir karakterle başlayıp 'a' veya 'e' ile devam etmeyen "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word NOT LIKE '_a%' AND word NOT LIKE '_e%';


--REGULAR Expression Condition (REGEX):
--İlk karakteri 'h', son karakteri 't' ve ikinci karakteri 'o', 'a' veya 'i' olan "word" değerlerini çağırın.
--1)YOL: Çok tekrar olduğu için tercih edilmez
SELECT word
FROM words
WHERE word LIKE 'ho%t' OR word LIKE 'ha%t' OR word LIKE 'hi%t'


--2)YOL: REGEX (~ tildesi ile başlanır)
SELECT word
FROM words
WHERE word ~'h[oai](.*)t';    --[oai] üçünden biri anlamına gelir (.*) 0(hiçbirşey) veya başkaşey/şeyler anlamına gelir


--İlk karakteri 'h', son karakteri 't' ve ikinci karakteri 'a'dan 'e'ye herhangi bir karakter olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'h[a-e](.*)t';  --[a-e] a,b,c,d ve e anlamına gelir ç hariç


--İlk karakteri 's', 'a' veya 'y' olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'^[say](.*)';  -- ^ ilk karakter anlamına gelir (~'^[say]' de çalışıyor)


--Son karakteri 'm', 'a' veya 'f' olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'(.*)[maf]$';   -- $ en sona gelecek anlamına gelir ( ~'[maf]$' de çalışıyor )

--veya
SELECT word
FROM words
WHERE word ~'[maf]$'; 


--İlk karakteri 's' ve son karakteri 'a' olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'^[s](.*)[a]$'; 


--veya
SELECT word
FROM words
WHERE word ~'s(.*)a';  --Tekli karakterlerde [] ^ $ işaretlerine gerek kalmaz


--Herhangi bir yerinde a olan
SELECT word
FROM words
WHERE word ~'a';   -- 'a'  %a% gibi çalışır


--İlk karakteri 'd' den 't' ye olan, herhangi bir karakter ile devam edip üçüncü karakteri 'l' olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'^[d-t].[l]';   . burada _ gibi herhangi  tek bir karakteri temsil eder


--veya 
SELECT word
FROM words
WHERE word ~'^[d-t].l';


--İlk karakteri 'd' den 't' ye olan,  herhangi iki karakter ile devam edip dördüncü karakteri 'e' olan "word" değerlerini çağırın.
SELECT word
FROM words
WHERE word ~'^[d-t]..e';   --veya   ~'^[d-t]..e(.*)'


CREATE TABLE workers
(
  id CHAR(9),
  name VARCHAR(50),
  state VARCHAR(50),
  salary SMALLINT,
  company VARCHAR(20)
);
INSERT INTO workers VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO workers VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO workers VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO workers VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO workers VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO workers VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO workers VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');


------------****************ÖDEV*******************---------------
--'E' başlayıp ve 'y' biten "name" değerleri dışındaki "name" değerlerini çağırın.
--1.YOL: NOT LIKE kullarak yapalım(ödev)

SELECT name
fROM workers
WHERE name NOT LIKE 'E%y';


--2.YOL:
SELECT name
FROM workers
WHERE name  ~'^[^E](.*)[^y]$';   -- köşeli parantez içinde ^ -den farklı- anlamına gelir 
                                  -- yani bunu kullanma bu gelmesin anlamındadır


------------****************ÖDEV*******************---------------
--'E' başlayıp ve 'y' biten "name" değerleri çağırın.
SELECT name
FROM workers
WHERE name  ~'^[E](.*)[y]$';
 

--'J', 'B' yada 'E' ile başlayan VE 'r' yada 't' ile biten "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name  ~'^[JBE](.*)[rt]$'; 


--Son karakteri 'r' yada 't' olan YADA ilk karakteri 'J','B', yada 'E' olan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name  ~'[rt]$' OR name  ~'^[JBE]'; 


--Son karakteri 'r' yada 't' olmayan VE ilk karakteri 'J','B', yada 'E' olmayan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name  ~'^[^JBE](.*)[^rt]$' ; --AND e gerek kalmadı


--Son karakteri 'r' yada 't' olmayan VEYA ilk karakteri 'J','B', yada 'E' olmayan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name   ~'^[^JBE]'   OR name  ~'[^rt]$' ;


------------****************ÖDEV*******************---------------
--Herhangi bir yerinde 'a' bulunan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name   ~'(.*)a(.*)';

--veya
SELECT name
FROM workers
WHERE name   ~'a';


--Herhangi bir yerinde 'a' yada 'k' bulunan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name   ~'[ka]' ;


--İlk harfi 'A' dan 'F' ye bir karakter olan ve ikinci harfi herhangi bir karakter olup üçüncü harfi 'a' olan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name   ~'^[A-F].a(.*)' ;  --veya ~'^[A-F].a' ;



------------****************ÖDEV*******************---------------
--İlk harfi 'A' dan 'F' ye bir karakter olan ve ikinci ve üçüncü harfi herhangi bir karakter olup 
   --dördüncü harfi 'i' olan "name" değerlerini çağırın.
SELECT name
FROM workers
WHERE name   ~'^[A-F]..i(.*)' ; 


--veya
SELECT name
FROM workers
WHERE name   ~'^[A-F]..i' ; 

--Üçüncü karakteri 'o' yada 'x' olan "state" değerlerini çağırın.
SELECT state
FROM workers
WHERE state   ~'..[ox]' ;    --(.*) optional  -- en başa ^ yazabilirdik


--Üçüncü karakteri 'o' yada 'x' olmayan "state" değerlerini çağırın.
SELECT state
FROM workers
WHERE state   ~'^..[^ox]' ; 


------------****************ÖDEV*******************---------------
--Sondan üçüncü karakteri 'n' yada 'x' olan  "state" değerlerini çağırın.(Ödev)
SELECT state
FROM workers
WHERE state   ~'[nx]..' ; 

veya
SELECT state
FROM workers
WHERE state   ~'(.*)[nx]..$' ;


--Sondan üçüncü karakteri 'n' yada 'x' olmayan  "state" değerlerini çağırın.(Ödev)
SELECT state
FROM workers
WHERE state   ~'(.*)[^nx]..$' ; 



--------------------------------------------------------------------------------------




--ORDER BY: REcordları artan ya da azalan düzeyde sıralamak için -sort- için kullanılır 
-- ORDER BY sadece SELECT statement ile kullanılır.
-- Defaultu ASC artan,  diğeri DESC azalan

--Recordları artan düzende number_of_letters değerine göre sırala.
SELECT *
FROM words
ORDER BY number_of_letters ;        --veya ORDER BY number_of_letters ASC(default sıralama tipi)


--Recordları azalan düzende number_of_letters değerine göre sırala.
SELECT *
FROM words
ORDER BY number_of_letters DESC ;   -- azalan sıralama için DESC yazmak zorunludur.


--Recordları azalan düzende "word" sürununa göre sıralayın.
SELECT *
FROM words
ORDER BY word DESC ;  -- en yukarıya en sondaki alfabetik karakter gelir


--NOT: Sütun (Field) adı yerine sutun no ilede sıralama yapabilirz.

SELECT*
FROM words
ORDER BY 3 DESC;    -- ORDER BY number_of_letters DESC    ile aynı anlama gelir. 
                     --3. sutun numberofletters çünkü.


